package com.appg.Komca.common.util;

import java.util.HashMap;
import java.util.Random;

import org.apache.commons.lang.StringUtils;

import com.appg.Komca.common.bean.DataMap;

public class DataUtil
{

	/**
	 * 랜던 숫자코드 만들기
	 * 
	 * @param codeLength
	 * @return
	 */
	public static String getRandomCode_Number(int codeLength)
	{
		int startNum = 0;
		int endNum = (int) (Math.pow(10, codeLength) - 1);

		int randomNumber = getRandomNumber(startNum, endNum);

		return setLeftPad(String.valueOf(randomNumber), codeLength, "0");

	}

	/**
	 * 랜던 문자코드 만들기
	 * 
	 * @param codeLength
	 * @return
	 */
	public static String getRandomCode_Character(int codeLength)
	{
		return getRandomCharacter(codeLength);
	}
	
	/**
	 * 렌덤 문자+숫자 코드
	 * @param codeLength
	 * @return
	 */
	public static String getRandomCode_Rand(int codeLength){
		Random rand = new Random();
		StringBuffer buf = new StringBuffer();
		
		for(int i = 0; i < codeLength; i++){
		    if(rand.nextBoolean()){
		        buf.append((char)((int)(rand.nextInt(26))+65));
		    }else{
		        buf.append((rand.nextInt(10))); 
		    }
		}
		
		return buf.toString();
	}
	/**
	 * 특정범위 랜덤 숫자 생성
	 * 
	 * @param min
	 * @param max
	 * @return
	 */
	private static int getRandomNumber(int min, int max)
	{
		return (int) (Math.random() * (max - min + 1)) + min;
	}

	/**
	 * 문자 코드 만들기
	 * 
	 * @param charLength
	 * @return
	 */
	private static String getRandomCharacter(int charLength)
	{
		String codeString = "";

		for (int i = 0; i < charLength; i++)
		{
			// 아스키 코드의 문자 중 대문자를 기준으로 코드를 하나씩 뽑음
			int charAscii = getRandomNumber(65, 90);
			codeString += Character.toString((char) charAscii);
		}

		return codeString;
	}

	/**
	 * 왼쪽으로 특정 문자 채우기
	 * 
	 * @param str
	 * @param strSize
	 * @param padChar
	 * @return
	 */
	public static String setLeftPad(String str, int strSize, String padString)
	{
		return StringUtils.leftPad(str, strSize, padString);
	}

	/**
	 * 왼쪽으로 특정 문자 채우기
	 * 
	 * @param str
	 * @param strSize
	 * @param padChar
	 * @return
	 */
	public static String setRightPad(String str, int strSize, String padString)
	{
		return StringUtils.rightPad(str, strSize, padString);
	}

	/**
	 * 쿼리스트링 파싱
	 * 
	 * @param queryString
	 * @return
	 */
	public static HashMap<String, String> parseParam(String queryString)
	{
		HashMap<String, String> params = new HashMap<String, String>();

		if(queryString.indexOf("?") > -1)
			queryString = queryString.substring(0, queryString.indexOf("?"));

		if(!queryString.equals(""))
		{
			String[] paramsList = queryString.split("&");
			for (int i = 0; i < paramsList.length; i++)
			{
				System.out.println("parseParam : " + paramsList[i]);
				String[] pair = paramsList[i].split("=");
				params.put(pair[0], pair[1]);
			}
		}

		return params;

	}
	
	/**
	 * 필수 파라미터 체크
	 * 
	 * @param 
	 * @return
	 */
	public static boolean ChkParam(DataMap data) {
		boolean ret = true;
		
		for(String key : data.keySet()) {
			if (data.get(key).equals("") || data.get(key) == null) {
				ret = false;
				break;
			}
		}
		return ret;
	}
}
